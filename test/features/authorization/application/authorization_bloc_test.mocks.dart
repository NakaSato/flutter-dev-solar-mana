// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_architecture_app/test/features/authorization/application/authorization_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_architecture_app/features/authorization/domain/entities/permission.dart'
    as _i5;
import 'package:flutter_architecture_app/features/authorization/domain/entities/role.dart'
    as _i4;
import 'package:flutter_architecture_app/features/authorization/domain/services/authorization_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthorizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationService extends _i1.Mock
    implements _i2.AuthorizationService {
  MockAuthorizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> hasPermission(
    dynamic user,
    String? resource,
    String? action,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasPermission, [user, resource, action]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> hasResourceAccess(dynamic user, String? resource) =>
      (super.noSuchMethod(
            Invocation.method(#hasResourceAccess, [user, resource]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i4.Role?> getUserRole(dynamic user) =>
      (super.noSuchMethod(
            Invocation.method(#getUserRole, [user]),
            returnValue: _i3.Future<_i4.Role?>.value(),
          )
          as _i3.Future<_i4.Role?>);

  @override
  _i3.Future<List<_i5.Permission>> getUserPermissions(dynamic user) =>
      (super.noSuchMethod(
            Invocation.method(#getUserPermissions, [user]),
            returnValue: _i3.Future<List<_i5.Permission>>.value(
              <_i5.Permission>[],
            ),
          )
          as _i3.Future<List<_i5.Permission>>);

  @override
  _i3.Future<List<_i5.Permission>> getUserResourcePermissions(
    dynamic user,
    String? resource,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserResourcePermissions, [user, resource]),
            returnValue: _i3.Future<List<_i5.Permission>>.value(
              <_i5.Permission>[],
            ),
          )
          as _i3.Future<List<_i5.Permission>>);

  @override
  _i3.Future<bool> hasMultiplePermissions(
    dynamic user,
    String? resource,
    List<String>? actions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasMultiplePermissions, [
              user,
              resource,
              actions,
            ]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> hasAnyPermission(
    dynamic user,
    String? resource,
    List<String>? actions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasAnyPermission, [user, resource, actions]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> isUserRoleActive(dynamic user) =>
      (super.noSuchMethod(
            Invocation.method(#isUserRoleActive, [user]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Role>> getAllRoles() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoles, []),
            returnValue: _i3.Future<List<_i4.Role>>.value(<_i4.Role>[]),
          )
          as _i3.Future<List<_i4.Role>>);

  @override
  _i3.Future<List<_i5.Permission>> getAllPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPermissions, []),
            returnValue: _i3.Future<List<_i5.Permission>>.value(
              <_i5.Permission>[],
            ),
          )
          as _i3.Future<List<_i5.Permission>>);
}
