// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_architecture_app/test/features/authorization/domain/services/authorization_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_architecture_app/features/authorization/domain/entities/permission.dart'
    as _i5;
import 'package:flutter_architecture_app/features/authorization/domain/entities/role.dart'
    as _i4;
import 'package:flutter_architecture_app/features/authorization/domain/repositories/authorization_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthorizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationRepository extends _i1.Mock
    implements _i2.AuthorizationRepository {
  MockAuthorizationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Role?> getRoleByName(String? roleName) =>
      (super.noSuchMethod(
            Invocation.method(#getRoleByName, [roleName]),
            returnValue: _i3.Future<_i4.Role?>.value(),
          )
          as _i3.Future<_i4.Role?>);

  @override
  _i3.Future<List<_i4.Role>> getAllRoles() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoles, []),
            returnValue: _i3.Future<List<_i4.Role>>.value(<_i4.Role>[]),
          )
          as _i3.Future<List<_i4.Role>>);

  @override
  _i3.Future<List<_i5.Permission>> getPermissionsForRole(String? roleId) =>
      (super.noSuchMethod(
            Invocation.method(#getPermissionsForRole, [roleId]),
            returnValue: _i3.Future<List<_i5.Permission>>.value(
              <_i5.Permission>[],
            ),
          )
          as _i3.Future<List<_i5.Permission>>);

  @override
  _i3.Future<bool> hasRolePermission(
    String? roleName,
    String? resource,
    String? action,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasRolePermission, [roleName, resource, action]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i5.Permission>> getAllPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPermissions, []),
            returnValue: _i3.Future<List<_i5.Permission>>.value(
              <_i5.Permission>[],
            ),
          )
          as _i3.Future<List<_i5.Permission>>);

  @override
  _i3.Future<void> cacheRoleData(_i4.Role? role) =>
      (super.noSuchMethod(
            Invocation.method(#cacheRoleData, [role]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Role?> getCachedRole(String? roleName) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedRole, [roleName]),
            returnValue: _i3.Future<_i4.Role?>.value(),
          )
          as _i3.Future<_i4.Role?>);

  @override
  _i3.Future<void> clearRoleCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearRoleCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
