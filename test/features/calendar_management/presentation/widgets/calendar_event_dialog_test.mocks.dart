// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_architecture_app/test/features/calendar_management/presentation/widgets/calendar_event_dialog_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_architecture_app/features/calendar_management/domain/entities/calendar_event.dart'
    as _i3;
import 'package:flutter_architecture_app/features/calendar_management/domain/repositories/calendar_management_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCalendarEventListResponse_0 extends _i1.SmartFake
    implements _i2.CalendarEventListResponse {
  _FakeCalendarEventListResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCalendarEvent_1 extends _i1.SmartFake implements _i3.CalendarEvent {
  _FakeCalendarEvent_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConflictCheckResponse_2 extends _i1.SmartFake
    implements _i2.ConflictCheckResponse {
  _FakeConflictCheckResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CalendarManagementRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarManagementRepository extends _i1.Mock
    implements _i2.CalendarManagementRepository {
  MockCalendarManagementRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CalendarEventListResponse> getAllEvents({
    DateTime? startDate,
    DateTime? endDate,
    _i3.CalendarEventType? eventType,
    _i3.CalendarEventStatus? status,
    _i3.CalendarEventPriority? priority,
    bool? isAllDay,
    bool? isRecurring,
    String? projectId,
    String? taskId,
    String? createdByUserId,
    String? assignedToUserId,
    int? pageNumber = 1,
    int? pageSize = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAllEvents, [], {
              #startDate: startDate,
              #endDate: endDate,
              #eventType: eventType,
              #status: status,
              #priority: priority,
              #isAllDay: isAllDay,
              #isRecurring: isRecurring,
              #projectId: projectId,
              #taskId: taskId,
              #createdByUserId: createdByUserId,
              #assignedToUserId: assignedToUserId,
              #pageNumber: pageNumber,
              #pageSize: pageSize,
            }),
            returnValue: _i4.Future<_i2.CalendarEventListResponse>.value(
              _FakeCalendarEventListResponse_0(
                this,
                Invocation.method(#getAllEvents, [], {
                  #startDate: startDate,
                  #endDate: endDate,
                  #eventType: eventType,
                  #status: status,
                  #priority: priority,
                  #isAllDay: isAllDay,
                  #isRecurring: isRecurring,
                  #projectId: projectId,
                  #taskId: taskId,
                  #createdByUserId: createdByUserId,
                  #assignedToUserId: assignedToUserId,
                  #pageNumber: pageNumber,
                  #pageSize: pageSize,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.CalendarEventListResponse>);

  @override
  _i4.Future<_i3.CalendarEvent?> getEventById(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#getEventById, [eventId]),
            returnValue: _i4.Future<_i3.CalendarEvent?>.value(),
          )
          as _i4.Future<_i3.CalendarEvent?>);

  @override
  _i4.Future<_i3.CalendarEvent> createEvent(_i3.CalendarEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#createEvent, [event]),
            returnValue: _i4.Future<_i3.CalendarEvent>.value(
              _FakeCalendarEvent_1(
                this,
                Invocation.method(#createEvent, [event]),
              ),
            ),
          )
          as _i4.Future<_i3.CalendarEvent>);

  @override
  _i4.Future<_i3.CalendarEvent> updateEvent(_i3.CalendarEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#updateEvent, [event]),
            returnValue: _i4.Future<_i3.CalendarEvent>.value(
              _FakeCalendarEvent_1(
                this,
                Invocation.method(#updateEvent, [event]),
              ),
            ),
          )
          as _i4.Future<_i3.CalendarEvent>);

  @override
  _i4.Future<void> deleteEvent(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEvent, [eventId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i3.CalendarEvent>> getEventsByProject(
    String? projectId, {
    DateTime? startDate,
    DateTime? endDate,
    _i3.CalendarEventType? eventType,
    _i3.CalendarEventStatus? status,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getEventsByProject,
              [projectId],
              {
                #startDate: startDate,
                #endDate: endDate,
                #eventType: eventType,
                #status: status,
              },
            ),
            returnValue: _i4.Future<List<_i3.CalendarEvent>>.value(
              <_i3.CalendarEvent>[],
            ),
          )
          as _i4.Future<List<_i3.CalendarEvent>>);

  @override
  _i4.Future<List<_i3.CalendarEvent>> getEventsByTask(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#getEventsByTask, [taskId]),
            returnValue: _i4.Future<List<_i3.CalendarEvent>>.value(
              <_i3.CalendarEvent>[],
            ),
          )
          as _i4.Future<List<_i3.CalendarEvent>>);

  @override
  _i4.Future<List<_i3.CalendarEvent>> getEventsByUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getEventsByUser, [userId]),
            returnValue: _i4.Future<List<_i3.CalendarEvent>>.value(
              <_i3.CalendarEvent>[],
            ),
          )
          as _i4.Future<List<_i3.CalendarEvent>>);

  @override
  _i4.Future<List<_i3.CalendarEvent>> getUpcomingEvents({
    int? days = 7,
    String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingEvents, [], {
              #days: days,
              #userId: userId,
            }),
            returnValue: _i4.Future<List<_i3.CalendarEvent>>.value(
              <_i3.CalendarEvent>[],
            ),
          )
          as _i4.Future<List<_i3.CalendarEvent>>);

  @override
  _i4.Future<_i2.ConflictCheckResponse> checkEventConflicts({
    required DateTime? startDateTime,
    required DateTime? endDateTime,
    required String? userId,
    String? excludeEventId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#checkEventConflicts, [], {
              #startDateTime: startDateTime,
              #endDateTime: endDateTime,
              #userId: userId,
              #excludeEventId: excludeEventId,
            }),
            returnValue: _i4.Future<_i2.ConflictCheckResponse>.value(
              _FakeConflictCheckResponse_2(
                this,
                Invocation.method(#checkEventConflicts, [], {
                  #startDateTime: startDateTime,
                  #endDateTime: endDateTime,
                  #userId: userId,
                  #excludeEventId: excludeEventId,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ConflictCheckResponse>);

  @override
  _i4.Future<List<_i3.CalendarEvent>> searchEvents(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchEvents, [query]),
            returnValue: _i4.Future<List<_i3.CalendarEvent>>.value(
              <_i3.CalendarEvent>[],
            ),
          )
          as _i4.Future<List<_i3.CalendarEvent>>);
}
